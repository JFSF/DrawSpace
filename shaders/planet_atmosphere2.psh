
float4 flags : register(c0);
	// .x -> relative altitude
	// .y -> patch sidelenght
	// .z -> planet ray
	// .w -> patch orientation enum integer

float4 flags2 : register(c1);
	// .x -> ht textures resol

float4 flags6 : register(c6);
	// .x -> resol atlas textures splatting
	// .y -> transition texture globale/texture splatting : borne sup
	// .z -> transition texture globale/texture splatting : borne inf

float4 flags7 : register(c7);
	// .x -> ambient light
	// .y -> color0 light
	// .z -> color1 light
	// .w -> color2 light

float4 ambient_color    : register(c8);

float4 light0_dir_local : register(c9);
float4 light0_dir_global : register(c10);
float4 light0_color     : register(c11);


struct PS_INTPUT
{	
    //float4 c0 : COLOR0;
    //float4 c1 : COLOR1;
    float4 t0 : TEXCOORD0;
    float4 t1 : TEXCOORD1;
};

#include "spherelod_commons.hlsl"
#include "atmospheric_scattering.hlsl"

float4 ps_main( PS_INTPUT input ) : COLOR0
{
    atmo_scattering_sampling_result sampling = atmo_scattering_sampling(input.t0, input.t1, light0_dir_global);    
    float4 color; 
    color.xyz = atmo_scattering_color_result(sampling, light0_dir_global);
    color.w = color.z;
  
    return color;    
}
