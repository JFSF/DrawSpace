/*
*                                                                          
* DrawSpace Rendering engine                                               
* Emmanuel Chaumont Copyright (c) 2013-2016                              
*                                                                          
* This file is part of DrawSpace.                                          
*                                                                          
*    DrawSpace is free software: you can redistribute it and/or modify     
*    it under the terms of the GNU General Public License as published by  
*    the Free Software Foundation, either version 3 of the License, or     
*    (at your option) any later version.                                   
*                                                                          
*    DrawSpace is distributed in the hope that it will be useful,          
*    but WITHOUT ANY WARRANTY; without even the implied warranty of        
*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         
*    GNU General Public License for more details.                          
*                                                                          
*    You should have received a copy of the GNU General Public License     
*    along with DrawSpace.  If not, see <http://www.gnu.org/licenses/>.    
*
*/

float4 flags : register(c0);
	// .x -> fragment/layout relative altitude
	// .y -> patch sidelenght
	// .z -> fragment/layout ray
	// .w -> patch orientation enum integer

float4 flags2 : register(c1);
	// .x -> ht textures resol

float4 flags6 : register(c6);
	// .x -> resol atlas textures splatting
	// .y -> transition texture globale/texture splatting : borne sup
	// .z -> transition texture globale/texture splatting : borne inf

float4 flags7 : register(c7);
	// .x -> ambient light
	// .y -> color0 light
	// .z -> color1 light
	// .w -> color2 light

float4 ambient_color    : register(c8);

float4 light0_dir_local : register(c9);
float4 light0_color     : register(c10);

float4 light1_dir_local : register(c11);
float4 light1_color     : register(c12);

float4 light2_dir_local : register(c13);
float4 light2_color     : register(c14);

sampler2D HT_Texture				: register(s0);  // texture Humidite, Temperature, Altitudes
sampler2D Pixels_HTMap_Texture		: register(s1);  // texture HT en pixels
sampler2D Splatting_HTMap_Texture	: register(s2);  // texture HT pour splatting

struct PS_INTPUT
{	
	float4 LODGlobalPatch_TexCoord	: TEXCOORD0;
	float4 UnitPatch_TexCoord		: TEXCOORD1;
	float4 GlobalPatch_TexCoord		: TEXCOORD2;

    float4 c0 : COLOR0;
    float4 c1 : COLOR1;

    float Fog : FOG;
};

#include "spherelod_commons.hlsl"
#include "landscapes.hlsl"



float4 ps_main( PS_INTPUT input ) : COLOR0
{
	float4 final_color = 0.0;
    float4 lit_color = 0.0;
	float4 pixel_color = 0.0;

	float4 temp_humidity = tex2D( HT_Texture, input.LODGlobalPatch_TexCoord );

	float lim_sup = flags6.y;
	float lim_inf = flags6.z;

	bool sea = false;

	if( flags.x <= lim_inf )
	{
		// si altitude relative a un certain seuil

		// regarder l'altitude vertex interpole pour determiner si rendu mer
		if( input.LODGlobalPatch_TexCoord.z <= 0.0 ) // altitude vertex (interpolee)
		{
			sea = true;
		}
	}
	else
	{
		// si altitude relative > 1.5

		// regarder texture donnees temperature/humidite pour determiner si rendu mer
		if( temp_humidity.z > 0.0 )
		{
			sea = true;
		}
	}


	float3 avg = 0.0;

	if( !sea )
	{
		avg = compute_terrain_bump_vector( temp_humidity.w, flags2.x, HT_Texture, input.LODGlobalPatch_TexCoord, 100.0 );
	}
	
	float3 texel_pos = compute_front_face_point_vector( input.GlobalPatch_TexCoord );

	if( !sea )
	{
        float k = clamp((1.5708 - atan(30.0 * (flags.x - 1.0))), 0.01, 0.4);
        
		texel_pos.x += k * avg.x;
		texel_pos.y += k * -avg.y; // inversion sur l'axe y, car pour le repere u,v des textures l'axe v (y) est vers le bas
        
		texel_pos = normalize( texel_pos );

    }

	float3 texel_pos2;
	texel_pos2 = CubeToSphere( ProjectVectorToCube( flags.w, texel_pos ) );

	float lf0, lf1, lf2;

	if( flags7.y )
	{
		lf0 = clamp( dot( texel_pos2, light0_dir_local.xyz ), 0.0, 1.0 );
	}

	if( flags7.z )
	{
		lf1 = clamp( dot( texel_pos2, light1_dir_local.xyz ), 0.0, 1.0 );
	}

	if( flags7.w )
	{
		lf2 = clamp( dot( texel_pos2, light2_dir_local ), 0.0, 1.0 );
	}


	////////////////////////////////////////////////////////////////////////////////////
	
	if( flags.x > 0.0 && flags.x <= lim_inf )
	{			
		if( sea ) 
		{
			pixel_color.x = 0.17;
			pixel_color.y = 0.36;
			pixel_color.z = 0.48;
		}
		else
		{
			pixel_color = splatting_color( input.UnitPatch_TexCoord, temp_humidity.x, temp_humidity.y, flags6.x, Splatting_HTMap_Texture );	
		}

	}
	else if( flags.x > lim_inf && flags.x <= lim_sup )
	{
		float4 color_splat = splatting_color( input.UnitPatch_TexCoord, temp_humidity.x, temp_humidity.y, flags6.x, Splatting_HTMap_Texture );
		float4 color_pixel = tex2D( Pixels_HTMap_Texture, temp_humidity );

		if( sea )
		{
			pixel_color.x = 0.17;
			pixel_color.y = 0.36;
			pixel_color.z = 0.48;
		}
		else
		{
			pixel_color = lerp( color_splat, color_pixel, ( flags.x - lim_inf ) / ( lim_sup - lim_inf ) );
		}
	}
	else
	{		
		if( sea )
		{
			pixel_color.x = 0.17;
			pixel_color.y = 0.36;
			pixel_color.z = 0.48;
		}
		else
		{
			pixel_color = tex2D( Pixels_HTMap_Texture, temp_humidity );
		}
	}

    ///////////////////// inclure le "fog de surface" dans la couleur pixel

    pixel_color = saturate(lerp(float4(0.45, 0.63, 0.78, 1.0), pixel_color, input.Fog));

    /////////////////////
	
	if( flags7.x )
	{
        lit_color += ambient_color;
    }
	
	if( flags7.y )
	{
        lit_color += lf0 * light0_color;
    }

	if( flags7.z )
	{
        lit_color += lf1 * light1_color;
    }

	if( flags7.w )
	{
        lit_color += lf2 * light2_color;
    }
	


    final_color.xyz = input.c0 + (lit_color * pixel_color * input.c1);
    //final_color.xyz = input.c0 + ( lit_color * pixel_color);
    final_color.w = 1.0;

	return final_color;
}
