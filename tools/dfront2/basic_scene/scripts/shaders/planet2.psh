
float4 flags : register(c0);
	// .x -> relative altitude
	// .y -> patch sidelenght
	// .z -> planet ray
	// .w -> patch orientation enum integer

float4 flags2 : register(c1);
	// .x -> ht textures resol

float4 flags6 : register(c6);
	// .x -> resol atlas textures splatting
	// .y -> transition texture globale/texture splatting : borne sup
	// .z -> transition texture globale/texture splatting : borne inf

float4 flags7 : register(c7);
	// .x -> ambient light
	// .y -> color0 light
	// .z -> color1 light
	// .w -> color2 light

float4 ambient_color    : register(c8);

float4 light0_dir_local : register(c9);
float4 light0_color     : register(c10);

float4 light1_dir_local : register(c11);
float4 light1_color     : register(c12);

float4 light2_dir_local : register(c13);
float4 light2_color     : register(c14);

sampler2D HT_Texture				: register(s0);  // texture Humidite, Temperature, Altitudes
sampler2D Pixels_HTMap_Texture		: register(s1);  // texture HT en pixels
sampler2D Splatting_HTMap_Texture	: register(s2);  // texture HT pour splatting

struct PS_INTPUT
{	
	float4 LODGlobalPatch_TexCoord	: TEXCOORD0;
	float4 UnitPatch_TexCoord		: TEXCOORD1;
	float4 GlobalPatch_TexCoord		: TEXCOORD2;
};

#include "spherelod_commons.hlsl"


float4 ps_main( PS_INTPUT input ) : COLOR0
{
	float4 final_color = 0.0;
	float4 pixel_color = 0.0;

	float4 temp_humidity = tex2D( HT_Texture, input.LODGlobalPatch_TexCoord );

	float lim_sup = flags6.y;
	float lim_inf = flags6.z;

	bool sea = false;

	if( flags.x <= lim_inf )
	{
		// si altitude relative a un certain seuil

		// regarder l'altitude vertex interpole pour determiner si rendu mer
		if( input.LODGlobalPatch_TexCoord.z <= 0.0 ) // altitude vertex (interpolee)
		{
			sea = true;
		}
	}
	else
	{
		// si altitude relative > 1.5

		// regarder texture donnees temperature/humidite pour determiner si rendu mer
		if( temp_humidity.z > 0.0 )
		{
			sea = true;
		}
	}


	float3 avg = 0.0;

	if( !sea )
	{
		avg = compute_terrain_bump_vector( temp_humidity.w, flags2.x, HT_Texture, input.LODGlobalPatch_TexCoord, 100.0 );
	}
	
	float3 texel_pos = compute_front_face_point_vector( input.GlobalPatch_TexCoord );

	if( !sea )
	{
		float k = clamp( ( 1.5708 - atan( 30.0 * ( flags.x - 1.0 ) ) ), 0.01, 0.4 );

		texel_pos.x += k * avg.x;
		texel_pos.y += k * avg.y;

		texel_pos = normalize( texel_pos );
	}

	float3 texel_pos2;
	texel_pos2 = CubeToSphere( ProjectVectorToCube( flags.w, texel_pos ) );

	float lf0, lf1, lf2;

	if( flags7.y )
	{
		lf0 = clamp( dot( texel_pos2, light0_dir_local.xyz ), 0.0, 1.0 );
	}

	if( flags7.z )
	{
		lf1 = clamp( dot( texel_pos2, light1_dir_local.xyz ), 0.0, 1.0 );
	}

	if( flags7.w )
	{
		lf2 = clamp( dot( texel_pos2, light2_dir_local ), 0.0, 1.0 );
	}


	////////////////////////////////////////////////////////////////////////////////////
	
	if( flags.x > 0.0 && flags.x <= lim_inf )
	{			
		if( sea ) 
		{
			pixel_color.x = 0.17;
			pixel_color.y = 0.36;
			pixel_color.z = 0.48;
		}
		else
		{
			pixel_color = splatting_color( input.UnitPatch_TexCoord, temp_humidity.x, temp_humidity.y );	
		}

	}
	else if( flags.x > lim_inf && flags.x <= lim_sup )
	{
		float4 color_splat = splatting_color( input.UnitPatch_TexCoord, temp_humidity.x, temp_humidity.y );
		float4 color_pixel = tex2D( Pixels_HTMap_Texture, temp_humidity );

		if( sea )
		{
			pixel_color.x = 0.17;
			pixel_color.y = 0.36;
			pixel_color.z = 0.48;
		}
		else
		{
			pixel_color = lerp( color_splat, color_pixel, ( flags.x - lim_inf ) / ( lim_sup - lim_inf ) );
		}
	}
	else
	{		
		if( sea )
		{
			pixel_color.x = 0.17;
			pixel_color.y = 0.36;
			pixel_color.z = 0.48;
		}
		else
		{
			pixel_color = tex2D( Pixels_HTMap_Texture, temp_humidity );
		}
	}
	
	if( flags7.x )
	{
		final_color += ambient_color;
	}
	
	if( flags7.y )
	{
		final_color += lf0 * light0_color;
	}

	if( flags7.z )
	{
		final_color += lf1 * light1_color;
	}

	if( flags7.w )
	{
		final_color += lf2 * light2_color;
	}
	
	final_color *= pixel_color;

	return final_color;
}
